#!/usr/bin/env python3

#Author Kelsey Florek
#email kelsey.florek@slh.wisc.edu
#description determine the minimum inhibitory concentration from the genotypic
#data using a machine learning algorithim

import os,sys,argparse,json
import app.kmer as kmer
from app.model import predict

#setup argparser to display help if no arguments
class MyParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit(2)

#determine command line arguments and get path
parser = MyParser(description='SaloMIC is a pipeline to estimate the Minimum Inhibitory Concentration (MIC) of an antibiotic from the nucleotide information in Salmonella (Sal).')

parser.add_argument('forward_reads',help='path to the forward reads')
parser.add_argument('reverse_reads',help='path to the reverse reads')
parser.add_argument('--db',type=str,help='AR database to use',default='ncbi_ar')
parser.add_argument('--model',type=str,help='model to use',default='sal')
parser.add_argument('-t',type=int,help='number of threads',default=4)

args = parser.parse_args()

#establish global paths
salomic_path = os.path.dirname(os.path.dirname(os.path.abspath(os.path.realpath(__file__))))
model_path = os.path.join(salomic_path,'SaloMic/app/rf_model.sav')
vocab_path = os.path.join(salomic_path,'SaloMic/db/kmer_dictionary.json')

kmer_file = kmer.local_mapping(args.t,args.forward_reads,args.reverse_reads,args.db)

with open(vocab_path,'r') as infile:
    v = json.load(infile)
    id,result = predict([kmer_file],v,model_path)
    print(id)
    print(result)
